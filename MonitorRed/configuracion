#!/bin/bash

# VARIABLE QUE RECOJEN LAS RUTAS
ruta_ejecucion=$(dirname "$(readlink -f "$0")") #es la ruta de ejecucion del script sin la / al final
ruta_escritorio=$(xdg-user-dir DESKTOP) #es la ruta de tu escritorio sin la / al final

#toma el control al pulsar control + c
trap ctrl_c INT
function ctrl_c()
{
if [ "$configurado_servicios" = "si" ] || [ "$configurado_ips" = "si" ] || [ "$configurado_dominios" = "si" ]; then
    echo ""
    #echo -e "${azul} Gracias ${rosa}$(whoami)${azul}. Por utilizar mi scriptttttttttttttttttttttttttttt.${borra_colores}"
    echo ""
    sleep 1; exit
else
    echo ""
    echo -e "${amarillo} No has configurado ningun Servicio, Dominio o Ips.${borra_colores}"
    echo -e "${rojo} Saliendo del script.${borra_colores}"
    rm $ruta_ejecucion/MonitorRedIps.config 2>/dev/null 1>/dev/null 0>/dev/null
    rm $ruta_ejecucion/MonitorRedDominios.config 2>/dev/null 1>/dev/null 0>/dev/null
    rm $ruta_ejecucion/MonitorRedServicios.config 2>/dev/null 1>/dev/null 0>/dev/null
    rm $ruta_ejecucion/configuradosino 2>/dev/null 1>/dev/null 0>/dev/null
    echo 'configurado_ips="no"' >> $ruta_ejecucion/configuradosino
    echo 'configurado_dominios="no"' >> $ruta_ejecucion/configuradosino
    echo 'configurado_servicios="no"' >> $ruta_ejecucion/configuradosino
    sleep 3; exit
    fi
}

#colores
rojo="\e[0;31m\033[1m" #rojo
verde="\e[;32m\033[1m"
azul="\e[0;34m\033[1m"
amarillo="\e[0;33m\033[1m"
rosa="\e[0;35m\033[1m"
turquesa="\e[0;36m\033[1m"
borra_colores="\033[0m\e[0m" #borra colores

menu_info(){
# muestra el menu de sukigsx
clear
echo ""
echo -e "${rosa}            _    _                  ${azul}   Nombre del script ( ${borra_colores}$NombreScript${azul} )${borra_colores}"
echo -e "${rosa}  ___ _   _| | _(_) __ _ _____  __  ${azul}   Descripcion ( ${borra_colores}$DescripcionDelScript${azul})${borra_colores}"
echo -e "${rosa} / __| | | | |/ / |/ _\ / __\ \/ /  ${azul}   Version            =${borra_colores} $version"
echo -e "${rosa} \__ \ |_| |   <| | (_| \__ \>  <   ${azul}   Conexion Internet  =${borra_colores} $conexion"
echo -e "${rosa} |___/\__,_|_|\_\_|\__, |___/_/\_\  ${azul}   Software necesario =${borra_colores} $software"
echo -e "${rosa}                  |___/             ${azul}   Actualizado        =${borra_colores} $actualizado"
echo -e ""
echo -e "${azul} Contacto: ( ${borra_colores}Correo $Correo${azul} ) ( ${borra_colores}Web $Web${azul} )${borra_colores}"
echo ""
echo -e "${azul} Estado de configuracion del script:${borra_colores}"
echo ""
echo -e "${azul}    Servicios${borra_colores} =${amarillo} $configurado_servicios${borra_colores}"
echo -e "${azul}    Ips      ${borra_colores} =${amarillo} $configurado_ips${borra_colores}"
echo -e "${azul}    Dominios ${borra_colores} =${amarillo} $configurado_dominios${borra_colores}"
echo ""
}

# Función para validar una dirección IP
validate_ip() {
local ip=$1
local valid_ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

if [[ $ip =~ $valid_ip_regex ]]; then
    ip_correpto="si"
else
    echo -e "${amarillo} Error: Dirección IP no válida.${borra_colores}"
    ip_correpto="no"
fi
}

# Función para validar un nombre sin caracteres especiales ni en blanco
validate_name() {
local name=$1
local valid_name_regex="^[a-zA-Z0-9_]+$"

if [[ $name =~ $valid_name_regex && ! -z $name ]]; then
    nombre_correpto="si"
else
    echo -e "${amarillo} Error: Nombre no válido. Debe contener solo letras, números y guiones bajos, y no puede estar en blanco.${borra_colores}"
    nombre_correpto="no"
fi
}

#valida el puerto
validate_port() {
    local port=$1

    if [[ $port =~ ^[0-9]+$ ]] && [[ $port -ge 1 ]] && [[ $port -le 65535 ]]; then
        port_correcto="si"
    else
        echo -e "${amarillo} Error: El puerto tiene que ser un numero y tiene que estar entre 1-65535.${borra_colores}"
        port_correcto="no"
    fi
}

validate_domain() {
    local domain=$1

    # Verificar que el dominio no contenga http://, https://, ni www.
    if [[ $domain =~ ^(http://|https://|www\.) ]]; then
        echo -e "${amarillo} Error: el dominio NO debe contener http://, https://, ni www.${borra_colores}"
        dominio_correcto="no"
    # Verificar que el dominio es válido
    elif [[ $domain =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        domain_correcto="si"
    else
        echo -e "${amarillo} Error: dominio inválido.${borra_colores}"
        dominio_correcto="no"
    fi

    # Mostrar el resultado de la validación
    if [[ $domain_correcto == "si" ]]; then
        dominio_correcto="si"
    else
        dominio_correcto="no"
    fi
}


#carga el fichero de configurado si o no (configuradosino) que contiene las variables para saber lo que esta configurado.
source $ruta_ejecucion/configuradosino

while :
do
    #carga el fichero de configurado si o no (configuradosino) que contiene las variables para saber lo que esta configurado.
    source $ruta_ejecucion/configuradosino
    menu_info
    echo -e "${verde}"; figlet Configuracion; echo -e "${borra_colores}"
    echo ""
    echo -e "   ${azul} 1-${borra_colores} Configurar Servicios que tengas en una misma ip (ej. 192.168.1.1:22 192.168.1.1:8080)"
    echo -e "   ${azul} 2-${borra_colores} Configurar Ips activas en tu red (ej. movil 192.168.1.50, tv 192.168.1.45)"
    echo -e "   ${azul} 3-${borra_colores} Configurar Dominios activos (ej. coches.web.es, motos.web.es)"
    echo -e "   ${azul} 4-${borra_colores} Programar para informar a un boot de telegram."
    echo -e ""
    echo -e "   ${amarillo}10-${borra_colores} Editar fichero configuracion de SERVICIOS."
    echo -e "   ${amarillo}11-${borra_colores} Editar fichero configuracion de IPS."
    echo -e "   ${amarillo}12-${borra_colores} Editar fichero configuracion de DOMINIOS."
    echo -e ""
    echo -e "   ${rojo}20-${borra_colores} Borra la configuracion de los SERVICIOS"
    echo -e "   ${rojo}21-${borra_colores} Borra la configuracion de la IPS activas"
    echo -e "   ${rojo}22-${borra_colores} Borra la configuracion de los DOMINIOS"
    echo -e "   ${rojo}23-${borra_colores} Borrar toda la configuracion."
    echo -e ""
    echo -e "   ${azul}90-${borra_colores} Ayuda"
    echo -e "   ${azul}99-${borra_colores} Ir al menu principal."
    echo ""
    echo -e -n "${azul} Selecciona numero de las opciones del menu (Control+c = Salir) ->${borra_colores} "; read opcion
    case $opcion in
        1)  #configurar Servicios
            # Buscar la cadena "declare -A ips" en el archivo
            if ! grep -q 'declare -A servicios' "$ruta_ejecucion/MonitorRedServicios.config"; then
                echo "declare -A servicios" >> $ruta_ejecucion/MonitorRedServicios.config
            fi


            while true
            do
                clear
                echo ""
                echo -e "${azul}- Listado de tus SERVICIOS para saber si estan avtivos. -${borra_colores}"
                echo ""
                tail -n +2 $ruta_ejecucion/MonitorRedServicios.config 2>/dev/null | awk -F'[[\]=]+' '{print "\033[32m" $3 "\033[0m =", "\033[32m" $2 "\033[0m"}' | column -t; echo ""
                echo ""

                # Solicitar y validar la dirección IP
                echo -e "${amarillo} Ej. router 192.168.1.1 8080 (S -> Terminar de introducir datos.).${borra_colores}"
                read -p " Dime un Nombre Dispositivo espacio y su dirección IP espacio su PUERTO -> " name ip port
                echo ""
                if  [ "$name" == "s" ] || [ "$name" == "S" ]; then
                    sed -i 's/configurado_servicios="no"/configurado_servicios="si"/' $ruta_ejecucion/configuradosino
                    break
                fi

                validate_ip "$ip"
                validate_name "$name"
                validate_port "$port"

                # Verifica si se debe salir del bucle


                # Agrega la entrada al archivo como un nuevo elemento del array
                if [[ "$ip_correpto" == "si" ]] && [[ "$nombre_correpto" == "si" ]] && [[ "$port_correcto" = "si" ]]; then
                    echo "servicios[$ip:$port]=$name" >> $ruta_ejecucion/MonitorRedServicios.config
                    echo ""
                    echo -e " Dispositivo ${azul}$name${borra_colores} con la ${azul}$ip:$port${borra_colores} = ${verde}ok${borra_colores}."
                    sleep 2
                else
                    echo -e "${rojo} Datos de dispositivo incorreptos.${borra_colores}"
                    echo ""
                    read -p " Pulsa una tecla para continuar." p
                fi
            done
            ;;

        2)  #configurar configurado_ips
            # Buscar la cadena "declare -A ips" en el archivo
            if ! grep -q 'declare -A ips' "$ruta_ejecucion/MonitorRedIps.config"; then
                echo "declare -A ips" >> $ruta_ejecucion/MonitorRedIps.config
            fi


            while true
            do
                clear
                echo ""
                echo -e "${azul}- Listado de tus IPS para saber si estan activas. -${borra_colores}"
                echo ""
                tail -n +2 $ruta_ejecucion/MonitorRedIps.config 2>/dev/null | awk -F'[[\]=]+' '{print "\033[32m" $3 "\033[0m =", "\033[32m" $2 "\033[0m"}' | column -t; echo ""
                echo ""

                # Solicitar y validar la dirección IP
                echo -e "${amarillo} Ej. router 192.168.1.1 (S -> Terminar de introducir datos.).${borra_colores}"
                read -p " Dime un Nombre Dispositivo espacio y su dirección IP -> " name ip
                echo ""
                if  [ "$name" == "s" ] || [ "$name" == "S" ]; then
                    sed -i 's/configurado_ips="no"/configurado_ips="si"/' $ruta_ejecucion/configuradosino
                    break
                fi

                validate_ip "$ip"
                validate_name "$name"

                # Verifica si se debe salir del bucle


                # Agrega la entrada al archivo como un nuevo elemento del array
                if [[ "$ip_correpto" == "si" ]] && [[ "$nombre_correpto" == "si" ]]; then
                    echo "ips[$ip]=$name" >> $ruta_ejecucion/MonitorRedIps.config
                    echo ""
                    echo -e " Dispositivo ${azul}$name${borra_colores} con la ${azul}$ip${borra_colores} = ${verde}ok${borra_colores}."
                    sleep 2
                else
                    echo -e "${rojo} Datos de dispositivo incorreptos.${borra_colores}"
                    echo ""
                    read -p " Pulsa una tecla para continuar." p
                fi
            done
            ;;

        3)  #configurar Dominios
            # Buscar la cadena "declare -A ips" en el archivo
            if ! grep -q 'declare -A dominios' "$ruta_ejecucion/MonitorRedDominios"; then
                echo "declare -A dominios" >> $ruta_ejecucion/MonitorRedDominios.config
            fi


            while true
            do
                clear
                echo ""
                echo -e "${azul}- Listado de tus DOMINIOS para saber si estan avtivos. -${borra_colores}"
                echo ""
                tail -n +2 $ruta_ejecucion/MonitorRedDominios.config 2>/dev/null | awk -F'[[\]=]+' '{print "\033[32m" $3 "\033[0m =", "\033[32m" $2 "\033[0m"}' | column -t; echo ""
                echo ""

                # Solicitar y validar la dirección IP
                echo -e "${amarillo} Ej. PaginaWeb google.es (S -> Terminar de introducir datos.).${borra_colores}"
                read -p " Dime un Nombre para el dominio y el dominio separado por espacio -> " name dominio
                echo ""
                if  [ "$name" == "s" ] || [ "$name" == "S" ]; then
                    sed -i 's/configurado_dominios="no"/configurado_dominios="si"/' $ruta_ejecucion/configuradosino
                    break
                fi

                validate_name "$name"
                validate_domain "$dominio"

                # Verifica si se debe salir del bucle


                # Agrega la entrada al archivo como un nuevo elemento del array
                if [[ "$nombre_correpto" == "si" ]] && [[ "$dominio_correcto" = "si" ]]; then
                    echo "dominios[$dominio]=$name" >> $ruta_ejecucion/MonitorRedDominios.config
                    echo ""
                    echo -e " nombre ${azul}$name${borra_colores} del dominio ${azul}$dominio${borra_colores} = ${verde}ok${borra_colores}."
                    sleep 2
                else
                    echo -e "${rojo} Datos del dominio incorreptos.${borra_colores}"
                    echo ""
                    read -p " Pulsa una tecla para continuar." p
                fi
            done
            ;;

        4)  #configurar para el telegram
            clear
            menu_info
            if [ -f $ruta_ejecucion/MonitorRedTelegram.config ]; then
                echo ""
                echo -e "${verde}"; figlet Bot Telegram; echo -e "${borra_colores}"
                echo ""
                echo -e "${amarillo} Ya dispones de una configuracion de tu Bot de Telegram.${borra_colores}"
                read -p " ¿ Deseas borrarla y configurar de nuevo (S/n) ? -> " sn
                if [[ "$sn" == "s" ]] || [[ "$sn" == "S" ]]; then

                    if [ "$configurado_servicios" = "si" ] || [ "$configurado_ips" = "si" ] || [ "$configurado_dominios" = "si" ]; then
                        rm $ruta_ejecucion/MonitorRedTelegram.config 2>/dev/null 1>/dev/null 0>/dev/null
                        bash $ruta_ejecucion/ConfigurarBotTelegran
                    else
                        echo ""
                        echo -e "${amarillo} No has configurado ningun Servicio, Dominio o Ips.${borra_colores}"
                        echo -e "${amarillo} Se necesita al menos uno para poder configurar el Bot de Telegram.${borra_colores}"
                        echo ""
                        sleep 5
                    fi

                else
                    echo ""
                    echo -e "${verde} No se modifica nada de la configuracion del Bot de Telegram.${borra_colores}"
                    sleep 4
                fi

            else

                if [ "$configurado_servicios" = "si" ] || [ "$configurado_ips" = "si" ] || [ "$configurado_dominios" = "si" ]; then
                    bash $ruta_ejecucion/ConfigurarBotTelegram
                else
                    echo ""
                    echo -e "${amarillo} No has configurado ningun Servicio, Dominio o Ips.${borra_colores}"
                    echo -e "${amarillo} Se necesita al menos uno para poder configurar el Bot de Telegram.${borra_colores}"
                    echo ""
                    sleep 7
                fi

            fi
            ;;

        10) #Editar fichero configuracion de SERVICIOS
            if [ "$configurado_servicios" = "si" ]; then
                nano $ruta_ejecucion/MonitorRedServicios.config
            else
                echo -e ""
                echo -e "${amarillo} No tienes configurados tus SERVICIOS.${borra_colores}"
                echo -e " Selecciona la opcion 1 del menu comfiguracion para poder editar."
                sleep 5
            fi
            ;;

        11) #Editar fichero configuracion de IPS.
            if [ "$configurado_ips" = "si" ]; then
                nano $ruta_ejecucion/MonitorRedIps.config
            else
                echo -e ""
                echo -e "${amarillo} No tienes configurados tus IPS.${borra_colores}"
                echo -e " Selecciona la opcion 2 del menu comfiguracion para poder editar."
                sleep 5
            fi
            ;;

        12) #Editar fichero configuracion de DOMINIOS
            if [ "$configurado_dominios" = "si" ]; then
                nano $ruta_ejecucion/MonitorRedDominios.config
            else
                echo -e ""
                echo -e "${amarillo} No tienes configurados tus IPS.${borra_colores}"
                echo -e " Selecciona la opcion 3 del menu comfiguracion para poder editar."
                sleep 5
            fi
            ;;


        20)  #Borra la configuracion de los SERVICIOS
            echo ""
            read -p " ¿ Seguro que quieres borrar la configuracion de SERVICIOS ? (S/n) -> " sn
            if [[ "$sn" == "s" ]] || [[ "$sn" == "S" ]]; then
                rm $ruta_ejecucion/MonitorRedServicios.config 2>/dev/null 1>/dev/null 0>/dev/null
                sed -i 's/configurado_servicios="si"/configurado_servicios="no"/' "$ruta_ejecucion/configuradosino"
                echo ""
                echo -e "${amarillo} Borrada la configuracion de SERVICIOS.${borra_colores}"; sleep 2
            else
                echo ""
                echo -e "${verde} No se borra nada.${borra_colores}"; sleep 2
            fi
            ;;

        21)  #Borra la configuracion de los IPS
            echo ""
            read -p " ¿ Seguro que quieres borrar la configuracion de IPS ? (S/n) -> " sn
            if [[ "$sn" == "s" ]] || [[ "$sn" == "S" ]]; then
                rm $ruta_ejecucion/MonitorRedIps.config 2>/dev/null 1>/dev/null 0>/dev/null
                sed -i 's/configurado_ips="si"/configurado_ips="no"/' "$ruta_ejecucion/configuradosino"
                echo ""
                echo -e "${amarillo} Borrada la configuracion de IPS.${borra_colores}"; sleep 2
            else
                echo ""
                echo -e "${verde} No se borra nada.${borra_colores}"; sleep 2
            fi
            ;;

        22)  #Borra la configuracion de los Dominios
            echo ""
            read -p " ¿ Seguro que quieres borrar la configuracion de Dominios ? (S/n) -> " sn
            if [[ "$sn" == "s" ]] || [[ "$sn" == "S" ]]; then
                rm $ruta_ejecucion/MonitorRedDominios.config 2>/dev/null 1>/dev/null 0>/dev/null
                sed -i 's/configurado_dominios="si"/configurado_dominios="no"/' "$ruta_ejecucion/configuradosino"
                echo ""
                echo -e "${amarillo} Borrada la configuracion de Dominios.${borra_colores}"; sleep 2
            else
                echo ""
                echo -e "${verde} No se borra nada.${borra_colores}"; sleep 2
            fi
            ;;

        23)  #borra toda la configuracion y lo deja como el inicio
            echo ""
            read -p " ¿ Seguro que quieres borrar toda la configuracion (S/n) ? -> " sn
            if [[ "$sn" == "s" ]] || [[ "$sn" == "S" ]]; then
                rm $ruta_ejecucion/MonitorRedIps.config 2>/dev/null 1>/dev/null 0>/dev/null
                rm $ruta_ejecucion/MonitorRedDominios.config 2>/dev/null 1>/dev/null 0>/dev/null
                rm $ruta_ejecucion/MonitorRedServicios.config 2>/dev/null 1>/dev/null 0>/dev/null
                rm $ruta_ejecucion/configuradosino 2>/dev/null 1>/dev/null 0>/dev/null
                rm $ruta_ejecucion/MonitorRedTelegram.config 2>/dev/null 1>/dev/null 0>/dev/null
                echo 'configurado_ips="no"' >> $ruta_ejecucion/configuradosino
                echo 'configurado_dominios="no"' >> $ruta_ejecucion/configuradosino
                echo 'configurado_servicios="no"' >> $ruta_ejecucion/configuradosino
                echo ""
                echo -e "${amarillo} Toda la configuracion restablecida a sus valores iniciales.${borra_colores}"; sleep 2
            else
                echo ""
                echo -e "${verde} No se borra nada.${borra_colores}"; sleep 2
            fi
            ;;

        90) #ayuda
            clear
            cat $ruta_ejecucion/ayuda
            read p
            ;;

        99) #ir al menu principal
            if [ "$configurado_servicios" = "si" ] || [ "$configurado_ips" = "si" ] || [ "$configurado_dominios" = "si" ]; then
                bash $ruta_ejecucion/MonitorRed
            else
                echo ""
                echo -e "${amarillo} No has configurado ningun Servicio, Dominio o Ips.${borra_colores}"
                echo ""
                sleep 4
            fi
            ;;

        *)  echo ""
            echo -e "${amarillo} Opcion no valida del menu.${borra_colores}"
            sleep 2
            ;;
    esac
done

